const path = require('path'); // eslint-disable-line @typescript-eslint/no-var-requires
const NextWorkboxPlugin = require('next-workbox-webpack-plugin'); // eslint-disable-line @typescript-eslint/no-var-requires
const WebpackPwaManifest = require('webpack-pwa-manifest'); // eslint-disable-line @typescript-eslint/no-var-requires
// const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')

const nextConfig = {
  env: {
    API_URL: '/api',
    CREDENTIALS: 'same-origin',
  },
  publicRuntimeConfig: false,
  // target: 'serverless',
  webpack(config, { dev, isServer, buildId }) {
    config.resolve.alias['components'] = path.join(__dirname, 'components');
    config.resolve.alias['consts'] = path.join(__dirname, 'consts');
    config.resolve.alias['contexts'] = path.join(__dirname, 'contexts');
    config.resolve.alias['enums'] = path.join(__dirname, 'enums');
    config.resolve.alias['firebase-auth'] = path.join(
      __dirname,
      'firebase-auth'
    );
    config.resolve.alias['hooks'] = path.join(__dirname, 'hooks');
    config.resolve.alias['pages'] = path.join(__dirname, 'pages');
    config.resolve.alias['services'] = path.join(__dirname, 'services');
    config.resolve.alias['styles'] = path.join(__dirname, 'styles');
    config.resolve.alias['types'] = path.join(__dirname, 'types');
    config.resolve.alias['utils'] = path.join(__dirname, 'utils');
    config.resolve.alias['validations'] = path.join(__dirname, 'validations');

    const workboxOptions = {
      // This option determines whether the service worker should start controlling any existing clients as soon as it activates.
      clientsClaim: false,
      // This option determines whether the service worker should skip the waiting lifecycle stage.
      skipWaiting: false,
      // Files matching this pattern are included in the precache manifest for pre-caching purposes. This is usually not needed as Workbox by default precaches all assets generated by webpack.
      // This is usually not needed as Workbox by default precaches all assets generated by webpack. But while developing this application, it seemed to skip some files
      globPatterns: ['.next/static/*', '.next/static/commons/*'],
      // This option is used to modify the precached URL mappings.
      // We use it to replace .next in the precached URLs to /_next/ because that is the location our app expects the assets to be served from. This only affects the assets precached using the globPatterns options.
      // All other precached assets already have their URLs prefixed correctly with /_next/
      modifyUrlPrefix: {
        '.next': '/_next',
      },
      runtimeCaching: [
        {
          urlPattern: '/',
          handler: 'networkFirst',
          options: {
            cacheName: 'html-cache',
          },
        },
        {
          urlPattern: /.*\.(?:png|jpg|jpeg|svg|gif)/,
          handler: 'cacheFirst',
          options: {
            cacheName: 'image-cache',
            cacheableResponse: {
              statuses: [0, 200],
            },
          },
        },
      ],
    };

    if (!isServer && !dev) {
      config.plugins.push(
        new NextWorkboxPlugin({
          buildId,
          ...workboxOptions,
        })
      );

      new WebpackPwaManifest({
        filename: 'static/manifest.json',
        name: 'Login Example',
        short_name: 'BPA', // eslint-disable-line @typescript-eslint/camelcase
        description: 'Login example with all best pratices of modern web app.',
        background_color: '#36D1DC', // eslint-disable-line @typescript-eslint/camelcase
        theme_color: '#5B86E5', // eslint-disable-line @typescript-eslint/camelcase
        display: 'standalone',
        fingerprints: false,
        // We are not using an HTML template or a plugin like html-webpack-plugin so we don't need HTML injection
        inject: false,
        start_url: '/', // eslint-disable-line @typescript-eslint/camelcase
        ios: {
          'apple-mobile-web-app-title': 'Next-PWA',
          'apple-mobile-web-app-status-bar-style': '#5755d9',
        },
        icons: [
          {
            src: path.resolve('static/favicon.ico'),
            sizes: [96, 128, 192, 256, 384, 512],
            destination: '/static',
          },
        ],
        includeDirectory: true,
        publicPath: '..',
      });
    }

    return config;
  },
};

module.exports = nextConfig;
